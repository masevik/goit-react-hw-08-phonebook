{"version":3,"file":"static/js/346.df384ffe.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/PhonebookForm/PhonebookForm.styled.js","components/PhonebookForm/PhonebookForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Title = styled.h2`\n  margin-bottom: 15px;\n  font-size: 24px;\n`;\n\nexport const StyledForm = styled(Form)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  padding: 20px;\n  border: 1px solid black;\n  color: #ffffff;\n  background: #3f51b5;\n  border-radius: 5px;\n`;\n\nexport const Button = styled.button`\n  width: 120px;\n  margin: 20px auto 0;\n  padding: 3px 15px;\n  color: #efb343;\n  font-size: 24px;\n  background: transparent;\n  border: 1px solid #efb343;\n  border-radius: 5px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n  &:hover {\n    color: #ffffff;\n    border-color: #ffffff;\n  }\n\n  &:active {\n    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);\n  }\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const Input = styled(Field)`\n  margin-bottom: 10px;\n  width: 100%;\n  height: 35px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-bottom: 10px;\n  color: lightgrey;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport {\n  Title,\n  Button,\n  StyledForm,\n  Input,\n  Label,\n  Error,\n} from './PhonebookForm.styled';\nimport { toast } from 'react-toastify';\nimport { Box } from 'components/Box';\n\nconst initialValues = { name: '', number: '+380' };\n\nconst phoneRegExp =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\nconst schema = yup.object().shape({\n  name: yup.string().min(3).max(40).required('Name is a required field'),\n  number: yup\n    .string()\n    .required()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .min(13, 'Too short')\n    .max(13, 'Too long'),\n});\n\nexport const PhonebookForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameInputId = nanoid();\n  const telInputId = nanoid();\n\n  const HandleSubmit = ({ name, number }, { resetForm }) => {\n    const isInContacts = contacts.some(\n      contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n    );\n\n    if (isInContacts) {\n      toast.error(name + ' is already in contacts');\n      return false;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mr=\"50px\">\n      <Title>Add contact</Title>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={HandleSubmit}\n        validationSchema={schema}\n      >\n        <StyledForm>\n          <Label htmlFor={nameInputId}>Name</Label>\n          <Input type=\"text\" name=\"name\" id={nameInputId} />\n          <Error component=\"span\" name=\"name\" />\n          <Label htmlFor={telInputId}>Number</Label>\n          <Input type=\"tel\" name=\"number\" id={telInputId} />\n          <Error component=\"span\" name=\"number\" />\n          <Button type=\"submit\">Submit</Button>\n        </StyledForm>\n      </Formik>\n    </Box>\n  );\n};\n","import styled from 'styled-components';\nimport { RiUser3Line, RiPhoneLine } from 'react-icons/ri';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  color: #ffffff;\n\n  :not(:last-child) {\n    margin-bottom: 5px;\n  }\n\n  span {\n    width: 450px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n`;\n\nexport const UserIcon = styled(RiUser3Line)`\n  margin-right: 10px;\n`;\n\nexport const PhoneIcon = styled(RiPhoneLine)`\n  margin-right: 10px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  width: 100px;\n  height: 30px;\n  padding: 3px 15px;\n  color: #efb343;\n  font-size: 20px;\n  background: transparent;\n  border: 1px solid #efb343;\n  border-radius: 5px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n  &:hover {\n    color: #ffffff;\n    border-color: #ffffff;\n  }\n\n  &:active {\n    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactItem,\n  UserIcon,\n  PhoneIcon,\n  Button,\n} from './ContactsList.styled';\nimport { Box } from 'components/Box';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  const filteredContacts = contacts.filter(item =>\n    item.name.toLowerCase().includes(filter)\n  );\n  const actualList = filter === '' ? contacts : filteredContacts;\n\n  return (\n    <>\n      {actualList.length > 0 && (\n        <Box\n          maxWidth=\"100%\"\n          pl=\"20px\"\n          pr=\"20px\"\n          pt=\"10px\"\n          pb=\"10px\"\n          borderRadius=\"5px\"\n          as=\"ul\"\n          backgroundColor=\"#3f51b5\"\n        >\n          {actualList.map(({ id, name, number }) => (\n            <ContactItem key={id}>\n              <span>\n                <UserIcon /> {name}\n              </span>\n              <span>\n                <PhoneIcon />\n                {number}\n              </span>\n              <Button\n                disabled={isLoading}\n                onClick={() => {\n                  dispatch(deleteContact(id));\n                }}\n              >\n                Edit\n              </Button>\n              <Button\n                disabled={isLoading}\n                onClick={() => {\n                  dispatch(deleteContact(id));\n                }}\n              >\n                Delete\n              </Button>\n            </ContactItem>\n          ))}\n        </Box>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  margin-bottom: 15px;\n`;\n\nexport const Label = styled.label`\n  color: #ffffff;\n  margin-left: 20px;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const Input = styled.input`\n  margin-left: 20px;\n  margin-right: 10px;\n  margin-bottom: 20px;\n  width: 460px;\n  height: 35px;\n`;\n\nexport const Button = styled.button`\n  width: 120px;\n  height: 35px;\n  margin-right: 20px;\n  padding: 3px 15px;\n  color: #efb343;\n  font-size: 24px;\n  background: transparent;\n  border: 1px solid #efb343;\n  border-radius: 5px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n  &:hover {\n    color: #ffffff;\n    border-color: #ffffff;\n  }\n\n  &:active {\n    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContact } from 'redux/contacts/filterSlice';\nimport { Title, Input, Label, Button } from './Filter.styled';\nimport { Box } from 'components/Box';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const filterInputId = nanoid();\n\n  const onFilterChange = event => {\n    const filter = event.currentTarget.value.toLowerCase();\n    dispatch(filterContact(filter));\n  };\n\n  return (\n    <>\n      <Title>Contacts</Title>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        backgroundColor=\"#3f51b5\"\n        maxWidth=\"500px\"\n        borderRadius=\"5px\"\n        mb=\"20px\"\n      >\n        <Label htmlFor={filterInputId}>Find contact by name</Label>\n        <Box display=\"flex\">\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            id={filterInputId}\n            value={filter}\n            onChange={onFilterChange}\n          />\n          <Button\n            onClick={() => {\n              dispatch(filterContact(''));\n            }}\n          >\n            Clear\n          </Button>\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { PhonebookForm } from 'components/PhonebookForm';\nimport { ContactsList } from 'components/ContactsList';\nimport { Filter } from 'components/Filter';\nimport { Loader } from 'components/Loader';\nimport { Box } from 'components/Box';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box display=\"flex\" ml=\"50px\" mt=\"50px\" mr=\"50px\" mb=\"20px\">\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <PhonebookForm />\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        flexGrow=\"1\"\n        alignItems=\"center\"\n        width=\"500px\"\n      >\n        {contacts.length > 0 && (\n          <>\n            <Filter />\n            <ContactsList />\n          </>\n        )}\n        {isLoading && !error && <Loader />}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Title","styled","StyledForm","Form","Button","Label","Input","Field","Error","ErrorMessage","initialValues","name","number","schema","yup","shape","min","max","required","matches","PhonebookForm","dispatch","useDispatch","useSelector","nameInputId","nanoid","telInputId","Box","display","flexDirection","alignItems","mr","onSubmit","resetForm","some","contact","toLocaleLowerCase","toast","addContact","validationSchema","htmlFor","type","id","component","ContactItem","UserIcon","RiUser3Line","PhoneIcon","RiPhoneLine","ContactsList","filteredContacts","item","toLowerCase","includes","actualList","length","maxWidth","pl","pr","pt","pb","borderRadius","as","backgroundColor","map","disabled","onClick","deleteContact","Filter","filterInputId","mb","value","onChange","event","currentTarget","filterContact","useEffect","fetchContacts","ml","mt","Helmet","flexGrow","width","Loader"],"sourceRoot":""}